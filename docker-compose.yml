services:
  ## KAFKA
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - esnet

  broker:
    image: confluentinc/cp-kafka:7.4.0
    hostname: broker
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: ["CMD", "bash", "-c", 'nc -z localhost 9092']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - esnet

  ## POSTGRES
  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test
      POSTGRES_DB: vcf
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - esnet

  ## ELASTICSEARCH
  es_master:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.0
    container_name: es_master
    networks:
      - esnet
    ports:
      - 9200:9200
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    environment:
      - node.name=es_master
      - cluster.name=elasticsearch_cluster
      - discovery.seed_hosts=es_slave1,es_slave2
      - cluster.initial_master_nodes=es_master,es_slave1,es_slave2
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "xpack.security.enabled=false"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 20s
      retries: 10

  es_slave1:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.0
    container_name: es_slave1
    networks:
      - esnet
    depends_on:
      es_master:
        condition: service_healthy
    ports:
      - 9201:9200
    volumes:
      - esdata2:/usr/share/elasticsearch/data
    environment:
      - node.name=es_slave1
      - cluster.name=elasticsearch_cluster
      - discovery.seed_hosts=es_master,es_slave2
      - cluster.initial_master_nodes=es_master,es_slave1,es_slave2
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "xpack.security.enabled=false"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9201"]
      interval: 30s
      timeout: 20s
      retries: 10

  es_slave2:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.0
    container_name: es_slave2
    networks:
      - esnet
    depends_on:
      es_master:
        condition: service_healthy
    ports:
      - 9202:9200
    volumes:
      - esdata3:/usr/share/elasticsearch/data
    environment:
      - node.name=es_slave2
      - cluster.name=elasticsearch_cluster
      - discovery.seed_hosts=es_master,es_slave1
      - cluster.initial_master_nodes=es_master,es_slave1,es_slave2
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "xpack.security.enabled=false"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9202"]
      interval: 30s
      timeout: 20s
      retries: 10

  ## AIRFLOW
  airflow:
    build:
      context: .
      dockerfile: Dockerfile
    image: airflow_custom:latest
    container_name: airflow
    restart: always
    depends_on:
      - postgres
      - broker
      - minio
      - es_master
      - es_slave1
      - es_slave2
    environment:
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__CORE__EXECUTOR: "LocalExecutor"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: "postgresql+psycopg2://postgres:test@postgres:5432/vcf"
      AIRFLOW__CORE__FERNET_KEY: "xV20HTLOxY-jKBQQOeS1Ww3eD-Jnpn3OxvRXp8Hz-eM="
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "false"
      AIRFLOW__WEBSERVER__ENABLE_PROXY_FIX: "True"
      AIRFLOW__WEBSERVER__ENABLE_CSRF: "True"
      AIRFLOW__WEBSERVER__SECRET_KEY: "mysecretkey"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    ports:
      - "8080:8080"
    command: "webserver"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - esnet

  airflow_scheduler:
    image: airflow_custom:latest
    container_name: airflow_scheduler
    restart: always
    depends_on:
      - airflow
    environment:
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__CORE__EXECUTOR: "LocalExecutor"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: "postgresql+psycopg2://postgres:test@postgres:5432/vcf"
      AIRFLOW__CORE__FERNET_KEY: "xV20HTLOxY-jKBQQOeS1Ww3eD-Jnpn3OxvRXp8Hz-eM="
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "false"
      AIRFLOW__WEBSERVER__ENABLE_PROXY_FIX: "True"
      AIRFLOW__WEBSERVER__ENABLE_CSRF: "True"
      AIRFLOW__WEBSERVER__SECRET_KEY: "mysecretkey"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: "scheduler"
    networks:
      - esnet
    entrypoint:
      - bash
      - -c
      - "pip install cyvcf2 && pip install confluent_kafka && pip install elasticsearch && pip install minio && airflow scheduler"

  airflow_init:
    image: airflow_custom:latest
    depends_on:
      - postgres
    environment:
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"  # Disable example DAGs
      AIRFLOW__CORE__EXECUTOR: "LocalExecutor" # Simple executor
      AIRFLOW__WEBSERVER__ENABLE_CSRF: "True"
      AIRFLOW__WEBSERVER__SECRET_KEY: "mysecretkey"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: "postgresql+psycopg2://postgres:test@postgres:5432/vcf" # Database connection
      AIRFLOW__CORE__FERNET_KEY: "xV20HTLOxY-jKBQQOeS1Ww3eD-Jnpn3OxvRXp8Hz-eM=" # Use an environment variable for the key
    command:
      - bash
      - -c
      - |
        airflow db init &&
        airflow users create -u admin -p admin -f admin -l admin -r Admin -e admin@gmail.com
    networks:
      - esnet

  ## MinIO
  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./storage:/data
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: admin123
    command: server --console-address ":9001" /data
    networks:
      - esnet
  mc:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc alias set myminio http://minio:9000 admin admin123) do echo 'waiting for minio' && sleep 5; done;
      /usr/bin/mc mb myminio/vcf-files;
      /usr/bin/mc event add myminio/vcf-files arn:minio:sqs::flask_event_listener:amqp
      "

volumes:
  esdata1:
    driver: local
  esdata2:
    driver: local
  esdata3:
    driver: local

networks:
  esnet:
    driver: bridge

## docker network create esnet
## docker-compose up -d --build
## docker-compose exec airflow bash
## airflow users create -u admin -f admin -l admin -r Admin -e admin@gmail.com